import { execSync } from 'node:child_process'
import fs from 'node:fs'

import { markdown } from '@karinjs/md-html'
import karin, { common, render, restart, segment, Update } from 'node-karin'

import { Common, Render, Version } from '../module/index.js'
export const help = karin.command(/^#?(kkk)?帮助$/, async (e) => {
  const img = await Render('help/index')
  await e.reply(img)
  return true
}, { name: 'kkk-帮助' })
export const version = karin.command(/^#?kkk版本$/, async (e) => {
  const changelogs = fs.readFileSync(Version.pluginPath + '/CHANGELOG.md', 'utf8')
  const html = markdown(changelogs, {
    gitcss: Common.useDarkTheme() ? 'github-markdown-dark.css' : 'github-markdown-light.css'
  })
  const htmlPath = `${Version.karinPath}/temp/html/${Version.pluginName}/help/version.html`
  fs.writeFileSync(htmlPath, html)
  const img = await render.renderHtml(htmlPath)
  await e.reply(segment.image(img))
  return true
}, { name: 'kkk-版本' })
export const changelogs = karin.command(/^#?kkk更新日志$/, async (e) => {
  const commits = getLatestCommitsSync()
  let htmlString = ''
  for (const commit of commits) {
    htmlString += `
<div align="center" style="padding: 3em; border: ${setColor(commit.message)}; border-radius: 0 50px 25px 100px;">
<p align="left" style="font-size: 1.5em; font-weight: 700;">${commit.message}</p>
<p align="right" style="font-size: 1.15em">COMMITTER: ${commit.committer}</p>
<p align="right" style="font-size: 1em">SHA: ${commit.sha}</p>
</div><br>
`
  }
  const html = markdown(htmlString, {
    gitcss: Common.useDarkTheme() ? 'github-markdown-dark.css' : 'github-markdown-light.css'
  })
  const htmlPath = `${Version.karinPath}/temp/html/${Version.pluginName}/help/changelogs.html`
  fs.writeFileSync(htmlPath, html)
  const img = await render.renderHtml(htmlPath)
  await e.reply(segment.image(img))
  return true
}, { name: 'kkk-更新日志', permission: 'master' })
export const update = karin.command(/^#?kkk更新$/, async (e) => {
  let [ name, cmd ] = [ Version.pluginName, 'git pull' ]
  if (e.msg.includes('强制'))
    cmd = 'git reset --hard && git pull --allow-unrelated-histories'
  const { data, status } = await Update.update(Version.pluginPath, cmd)
  await e.bot.sendForwardMessage(e.contact, common.makeForward([ segment.text(`更新${name}...${data}`) ], e.sender.uid, e.sender.nick))
  if (status === 'ok') {
    try {
      await e.reply(`\n更新完成，开始重启 本次运行时间：${common.uptime()}`, { at: true })
      await restart(e.self_id, e.contact, e.message_id)
      return true
    }
    catch (error) {
      await e.reply(`${Version.pluginName}重启失败，请手动重启以应用更新！`)
    }
  }
  return true
}, { name: 'kkk-更新', permission: 'master' })
const getLatestCommitsSync = () => {
  const command = 'git log -150 --pretty=format:"%h %an %s"'
  const output = execSync(command, { cwd: Version.pluginPath }).toString()
  // 将输出分割成数组，每一项是一个commit记录
  const commits = output.trim().split('\n')
  return commits.map((commit) => {
    // 分割SHA和其他信息
    const [ sha, ...rest ] = commit.split(' ')
    // 找到冒号的位置，分割提交者和提交信息
    const spaceIndex = rest.findIndex(word => word.includes(':'))
    const committerAndMessage = rest.slice(0, spaceIndex)
    const committer = committerAndMessage.join(' ')
    const message = rest.slice(spaceIndex).join(' ').replace(/^:/, '').trim() // 修复：移除冒号
    return { sha, committer, message }
  }).slice(0, 50) // 只取前30个commit
}
const setColor = (message) => {
  switch (true) {
    case message.includes('feat'):
      return '10px solid #a9ffb9'
    case message.includes('fix'):
      return '10px solid #ffe96e;'
    case message.includes('perf'):
      return '10px solid #928eff'
    case message.includes('refactor'):
      return '10px solid #ff3b3b'
    default:
      return '2px solid'
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBzL2hlbHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzdDLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUV4QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDM0MsT0FBTyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVsRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzVELE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQixPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDNUQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNoRixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ2hDLE1BQU0sRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixD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