import { execSync } from 'node:child_process';
import fs from 'node:fs';
import { markdown } from '@karinjs/md-html';
import karin, { common, render, restart, segment, Update } from 'node-karin';
import { Common, Render, Version } from '../module/index.js';
export const help = karin.command(/^#?(kkk)?帮助$/, async (e) => {
    const img = await Render('help/index');
    await e.reply(img);
    return true;
}, { name: 'kkk-帮助' });
export const version = karin.command(/^#?kkk版本$/, async (e) => {
    const changelogs = fs.readFileSync(Version.pluginPath + '/CHANGELOG.md', 'utf8');
    const html = markdown(changelogs, {
        gitcss: Common.useDarkTheme() ? 'github-markdown-dark.css' : 'github-markdown-light.css'
    });
    const htmlPath = `${Version.karinPath}/temp/html/${Version.pluginName}/help/version.html`;
    fs.writeFileSync(htmlPath, html);
    const img = await render.renderHtml(htmlPath);
    await e.reply(segment.image(img));
    return true;
}, { name: 'kkk-版本' });
export const changelogs = karin.command(/^#?kkk更新日志$/, async (e) => {
    const commits = getLatestCommitsSync();
    let htmlString = '';
    for (const commit of commits) {
        htmlString += `
<div align="center" style="padding: 3em; border: ${setColor(commit.message)}; border-radius: 0 50px 25px 100px;">
<p align="left" style="font-size: 1.5em; font-weight: 700;">${commit.message}</p>
<p align="right" style="font-size: 1.15em">COMMITTER: ${commit.committer}</p>
<p align="right" style="font-size: 1em">SHA: ${commit.sha}</p>
</div><br>
`;
    }
    const html = markdown(htmlString, {
        gitcss: Common.useDarkTheme() ? 'github-markdown-dark.css' : 'github-markdown-light.css'
    });
    const htmlPath = `${Version.karinPath}/temp/html/${Version.pluginName}/help/changelogs.html`;
    fs.writeFileSync(htmlPath, html);
    const img = await render.renderHtml(htmlPath);
    await e.reply(segment.image(img));
    return true;
}, { name: 'kkk-更新日志', permission: 'master' });
export const update = karin.command(/^#?kkk更新$/, async (e) => {
    let cmd = 'git pull';
    if (e.msg.includes('强制'))
        cmd = 'git reset --hard && git pull --allow-unrelated-histories';
    const { data, status } = await Update.update(Version.pluginPath, cmd);
    await e.bot.sendForwardMessage(e.contact, common.makeForward([segment.text(`更新${Version.pluginName}...${data}`)], e.sender.uid, e.sender.nick));
    if (status === 'ok') {
        try {
            await e.reply(`\n更新完成，开始重启 本次运行时间：${common.uptime()}`, { at: true });
            await restart(e.self_id, e.contact, e.message_id);
            return true;
        }
        catch (error) {
            await e.reply(`${Version.pluginName}重启失败，请手动重启以应用更新！`);
        }
    }
    return true;
}, { name: 'kkk-更新', permission: 'master' });
const getLatestCommitsSync = () => {
    const command = 'git log -150 --pretty=format:"%h %an %s"';
    const output = execSync(command, { cwd: Version.pluginPath }).toString();
    // 将输出分割成数组，每一项是一个commit记录
    const commits = output.trim().split('\n');
    return commits.map((commit) => {
        // 分割SHA和其他信息
        const [sha, ...rest] = commit.split(' ');
        // 找到冒号的位置，分割提交者和提交信息
        const spaceIndex = rest.findIndex(word => word.includes(':'));
        const committerAndMessage = rest.slice(0, spaceIndex);
        const committer = committerAndMessage.join(' ');
        const message = rest.slice(spaceIndex).join(' ').replace(/^:/, '').trim(); // 修复：移除冒号
        return { sha, committer, message };
    }).slice(0, 50); // 只取前30个commit
};
const setColor = (message) => {
    switch (true) {
        case message.includes('feat'):
            return '10px solid #a9ffb9';
        case message.includes('fix'):
            return '10px solid #ffe96e;';
        case message.includes('perf'):
            return '10px solid #928eff';
        case message.includes('refactor'):
            return '10px solid #ff3b3b';
        default:
            return '2px solid';
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBzL2hlbHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzdDLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUV4QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDM0MsT0FBTyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVsRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzVELE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQixPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDNUQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNoRixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ2hDLE1BQU0sRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixD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