name: release
on:
  push:
    # 监听 main 分支的 push 事件
    branches:
      - main
# 赋予 release-please-action 权限
permissions:
  contents: write
  pull-requests: write
jobs:
  # 设置 release-please 任务
  release-please:
    # 设置任务运行环境为 ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      # 使用 release-please-action 动作来自动创建发布 PR
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          # 设置发布类型为 node
          release-type: node
      # 检出代码
      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created }}
      # 设置 Node.js 环境
      - uses: actions/setup-node@v4
        with:
          # 设置 Node.js 版本
          node-version: 20
          # 设置 npm 源
          registry-url: "https://registry.npmjs.org"
      # 安装依赖
      - run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.RELEASE }}
        if: ${{ steps.release.outputs.release_created }}
      # 构建输出
      - run: npm run build
        if: ${{ steps.release.outputs.release_created }}
      # 删除开发依赖
      - run: npm pkg delete devDependencies
        if: ${{ steps.release.outputs.release_created }}
      # 发布到 npm
      - run: npm run pub
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.release.outputs.release_created }}
  
  sync-build:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出主分支代码
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false

      - name: 检查编译分支是否存在
        id: check-branch
        run: |
          if git ls-remote --exit-code origin build; then
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      - name: 创建或切换到编译分支
        run: |          
          if [ "${{ env.branch_exists }}" = "false" ]; then
            git init
            git checkout --orphan build
            git commit --allow-empty -m "初始化编译分支"
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git push --set-upstream origin build
          else
            git fetch origin build
            git checkout build
            git rm -rf .
            git clean -fd
          fi

      - name: 从main分支同步指定内容
        run: |
          # 从main分支检出指定文件
          git show main:package.json > package.json
          git show main:CHANGELOG.md > CHANGELOG.md
          git show main:README.md > README.md
          git show main:LICENSE > LICENSE
          
          # 检出指定目录
          git checkout main -- resources
          git checkout main -- config
          git checkout main -- lib
          
          # 提交变更
          git add .
          git commit -m "chore(build): sync required files from main branch"
          
      - name: 推送到 build 分支
        uses: ad-m/github-push-action@master
        with:
          branch: build
          github_token: ${{ secrets.GITHUB_TOKEN }}
          args: --set-upstream
