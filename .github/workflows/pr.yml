name: pr

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ env.SHOULD_RELEASE }}
    steps:
      - name: 检查是否需要进行版本更新
        id: check
        env:
          LATEST_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          if [[ "$LATEST_COMMIT_MESSAGE" =~ ^release:\ 发布版本.* ]]; then
              echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '.pre-commit-config.yaml'; then
              echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          else
              echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          fi

  auto-release:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
          run_install: |
            - args: [--global, release-it, "@release-it/conventional-changelog"]

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 定义 Release 命令
        run: |
          echo "RELEASE_CMD=pnpm release-it" >> $GITHUB_ENV

      - name: 获取版本
        id: get-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_CMD: ${{ env.RELEASE_CMD }}
        run: |
          $RELEASE_CMD
          VERSION=$(pnpm pkg get version | tr -d '"')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 检查分支
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          RELEASE_BRANCH="release/v$VERSION"

          git fetch origin $RELEASE_BRANCH || echo "远程分支不存在"

          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "分支 $RELEASE_BRANCH 已存在"
            git reset --hard
            git clean -fd
            git checkout $RELEASE_BRANCH
            git reset --hard origin/main
          else
            echo "创建新分支 $RELEASE_BRANCH"
            git reset --hard
            git clean -fd
            git checkout -b $RELEASE_BRANCH
            git push --set-upstream origin $RELEASE_BRANCH
          fi

      - name: 提交更新
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
          RELEASE_CMD: ${{ env.RELEASE_CMD }}
        run: |
          RELEASE_BRANCH="release/v$VERSION"
          $RELEASE_CMD
          git add CHANGELOG.md package.json
          git commit -m "release: 发布版本 v$VERSION 🚀" || echo "无更改需要提交"
          git push origin $RELEASE_BRANCH --force || git push -u origin $RELEASE_BRANCH --force

      - name: 创建或更新 PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          RELEASE_BRANCH="release/v$VERSION"
          CHANGELOG=$(awk 'BEGIN {flag=0}
            /^## / {if (flag) exit; flag=1}
            flag {print}' CHANGELOG.md)
          BODY=$(printf "# 更新日志\n\n%s\n" "$CHANGELOG")
          EXISTING_PR=$(gh pr list --head "$RELEASE_BRANCH" --base main --json number --jq '.[0].number')

          if [ -z "$EXISTING_PR" ]; then
            gh pr create \
              --head "$RELEASE_BRANCH" \
              --base main \
              --title "release: 发布版本 v$VERSION 🚀" \
              --body "$BODY"
          else
            gh pr edit "$EXISTING_PR" \
              --body "$BODY"
          fi